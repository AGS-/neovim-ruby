#!/usr/bin/env ruby
# encoding: utf-8

$:.unshift File.expand_path("../../lib", __FILE__)

require "neovim"
require "fileutils"
require "tempfile"
require File.expand_path("../../spec/support.rb", __FILE__)

def run_nvim(env, vimrc, *opts)
  system(env, Neovim.executable.path, "--headless", "-n", "-u", vimrc, *opts)
end

def generate_rplugin_manifest(vimrc, manifest_path)
  run_nvim(
    {"NVIM_RPLUGIN_MANIFEST" => manifest_path},
    vimrc,
    "-c", "silent UpdateRemotePlugins", "-c", "qa!"
  )

  exit($?.exitstatus) unless $?.success?
end

def run_spec(vimrc, test_path, out_path, manifest_path)
  run_nvim(
    {"VADER_OUTPUT_FILE" => out_path, "NVIM_RPLUGIN_MANIFEST" => manifest_path},
    vimrc,
    "-c", "Vader! #{test_path}"
  )

  yield $?
end

def main
  root = File.expand_path("../..", __FILE__)
  specs = File.join(root, "spec/acceptance/*_spec.vim")
  vimrc = File.join(root, "spec/acceptance/runtime/init.vim")
  rp_manifest = File.join(root, "spec/acceptance/runtime/rplugin.vim")
  exitstatus = 0

  begin
    generate_rplugin_manifest(vimrc, rp_manifest)

    Dir.glob(specs) do |vader_spec|
      print "#{File.basename(vader_spec)}... "

      Tempfile.open("vader.out") do |tmp|
        Dir.chdir(root) do
          run_spec(vimrc, vader_spec, tmp.path, rp_manifest) do |status|
            if status.success?
              puts "✔"
            else
              puts "✘"
              exitstatus = status.exitstatus
              IO.copy_stream(tmp, $stderr)
            end
          end
        end
      end
    end
  ensure
    FileUtils.rm_f(rp_manifest)
  end

  if exitstatus == 0
    puts "Acceptance tests passed. ✔"
  else
    puts "Acceptance tests failed. ✘"
  end

  exit(exitstatus)
end

main if __FILE__ == $0
